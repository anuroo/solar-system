name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    mongo-uri: mongodb+srv://supercluster.d83jj.mongodb.net/superData
    mongo-username: ${{vars.mongo_username}}
    mongo-password: ${{secrets.mongo_password}}     
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          fail-fast: false
          matrix:
            nodejs_version: [20,19,18]
            os: [ubuntu-latest,windows-latest]
            exclude: 
                - nodeJs_version: 20
        runs-on: ${{matrix.os}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4.2.2

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4.4.0
          with:
            node-version: ${{matrix.nodejs_version}}
        - name: cache npm dependencies
          uses: actions/cache@v4.2.3
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}} #cache all dependencies
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          #if: failure() && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome=='success')
          if: always()
          uses: actions/upload-artifact@v4.6.2
          with:
            name: Mocha-Test-Result
            path: test-results.
    docker:
         needs: [unit-testing,code-coverage]
         name: Containerization
         runs-on: ubuntu-latest
         steps:
          -  name: checkout repo
             uses: actions/checkout@v4.2.2

          -  name: DockerHub Login
             uses: docker/login-action@v3.4.0
             with:
               username: ${{vars.DOCKERHUB_USERNAME}}
               password: ${{secrets.DOCKERHUB_PASSWORD}}
          -  name: Build Docker Image for testing
             uses: docker/build-push-action@v6.18.0
             with:
               context: .
               push: false
               tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
          -  name: Docker Image tetsing
             run: |
              docker images
              docker run --name solar-system -d \
                -p 3000:3000 \
                -e MONGO-URI=${{env.mongo-uri}} \
                -e MONGO-USERNAME=${{ENV.mongo-username}} \
                -e MONGO-PASSWORD=${{env.mongo-password}} \
                ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}})
              echo ${IP}

              echo Testing the image using wget
              wget -q -o -127.0.0.1:3000/live | grep live

    code-coverage:
        name: code-coverage
        strategy:
          fail-fast: false
          matrix:
            nodejs_version: [22,21,20]
            os: [ubuntu-latest,windows-latest,macos-latest]
            exclude: 
                - nodeJs_version: 20
        runs-on: ${{matrix.os}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4.2.2

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4.4.0
          with:
            node-version: ${{matrix.nodejs_version}}
    
        - name: Install Dependencies
          run: npm install
        
        - name: check code coverage
          continue-on-error: true
          run: npm run code coverage
          
        - name: Archive code coverage
          uses: actions/upload-artifact@v4.6.2
          with:
            name: code-coverage-Result
            path: coverage
            retention-days: 5